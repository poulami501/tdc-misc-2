<library>

    <include href="lib"/>

	<!-- ************************************
         CachingComponent

         Superclass for all cachable components.  It contains
         a 'comptype' attribute that identifies the type of
         component and it defines a method that with place
         the element given a datanode

         *************************************-->

	<class name="CachableComponent"
           bgcolor="${parent.bgcolor}"
           fontsize="${parent['fontsize'] ? parent.fontsize : 12}">

        <datapath/>

        <ComponentCache name="cache"/>

        <!-- ================================
             ATTRIBUTES
             ================================= -->

        <attribute name="panel" value="${parent.panel}"/>

        <attribute name="valigndel"
                   value="$once{new lz.Delegate (this, 'doAlign')}"/>
        <attribute name="haligndel"
                   value="$once{new lz.Delegate (this, 'doAlign')}"/>

        <!-- which view to align relative to -->
        <attribute name="alignto" value="$once{this}"/>

		<!-- the type of component -->
		<attribute name="comptype" type="string" value="none"/>

		<!-- when true, the component will be cached. Values are configured in
		     ComponentCache.lzx, see node with ID gCompTypes. -->
	    <attribute name="usecache" type="boolean" value="false" />

        <!-- font color  -->
        <attribute name="fontcolor" value="${parent.fontcolor}"/>

        <attribute name="aadescription"/>
		<attribute name="aaname"/>
        <!-- ===============
             = METHODS
             =============== -->

		<handler name="oninit">
			this.usecache = gCompTypes.cacheEnabled[comptype];
			gController.setAttribute( 'cachableCompCounter', gController.cachableCompCounter + 1);
		</handler>

        <method name="doRemoveFromCache">
            this.setAttribute ('visible', true);
        </method>

        <method name="doReturnToCache"><![CDATA[
			var useCache = gCompTypes.cacheEnabled[comptype];
			// console.warn("CachableComponent#doReturnToCache: type=" + comptype + ", useCache=" + useCache);
            for (var i in this.subviews) {
				if (this.subviews [i] instanceof lz.CachableComponent &&
                        this.subviews [i].visible) {
                  	if (useCache) {
                  		this.cache.returnComponent (this.subviews [i]);
                  	} else {
                    	this.subviews[i].destroy();
                  	}
                }
            }
            this.reset();
        ]]></method>

        <method name="doAlign" args="ignore=null"><![CDATA[
			if(!(this instanceof lz.CachableImage && this.parent instanceof lz.CachableTextField)) {
	            var alignto = parent.alignto;

	            //halign
	            var newx = this.x;
	            //this.haligndel.unregisterAll ();
	            if (this.data && this.datapath.p.hasAttr ('halign')) {
	                this.valigndel.register (alignto, 'onwidth');

	                switch (this.datapath.p.getAttr ('halign')) {
	                    case 'left':
	                        newx = 0;
	                        break;
	                    case 'center':
	                        newx = (alignto.width - this.width)/2;
	                        break;
	                    case 'right':
	                        newx = alignto.width - this.width;
	                        break;
	                    default:
	//                        Debug.write ('unknown component halign',
	//                                      this.datapath.p.getAttr ('halign'));
	                }
	            }
	            this.setAttribute ('x', newx);

	            //valign
	            var newy = this.y;

	            this.valigndel.unregisterAll ();
	            if (this.data && this.datapath.p.hasAttr ('valign')) {
	                this.valigndel.register (alignto, 'onheight');
	                switch (this.datapath.p.getAttr ('valign')) {
	                    case 'top':
	                        newy = 0;
	                        break;
	                    case 'middle':
	                        newy = (alignto.height - this.height)/2;
	                        break;
	                    case 'bottom':
	                        newy = alignto.height - this.height;
	                        break;
	                    default:
	//                        Debug.write ('unknown component valign',
	//                                      this.datapath.p.getAttr ('valign'));
	                }
	            }
	            this.setAttribute ('y', newy);
			}
	        ]]></method>

        <method name="_initSubnodes"><![CDATA[
            var subnodes = this.datapath.p.childNodes;
            for (var i = 0; i < subnodes.length; i++) {
                if ( subnodes[i] instanceof lz.DataElement ) {
                    var newcomp = this.cache.getComponent (subnodes [i]);
                }
            }
        ]]></method>

        <attribute name="ddoneLoading"
                   value="$once{ new lz.Delegate( this, 'doneLoading' ) }" type="expression"/>
        <method name="doneLoading" args="ignore=null"><![CDATA[
        	if(this!=null && this.datapath.p!=null)
            	gController.componentDone( this, this.datapath.p.ownerDocument );
        ]]></method>

		<method name="setAAText" args="txt">
			this.setAttribute('aadescription', txt);
			this.setAttribute('aaname', txt);
		</method>

		<!-- Resets attributes, delegates and timers when a component is returned
		     to cache. Can be overridden by subclasses of this class. To include
		     the reset behavior defined here, just include a super.reset() call
		     in the subclass reset() method.
		  -->
		<method name="reset">

		</method>

		<!-- Override this method in subclasses to clean up resources before
		     calling the LaszloView#destroy() method. -->
		<method name="destroy">
			super.destroy();
		</method>

	</class>
</library>
