<library>
	<include href="CachableComponent.lzx" />


	<!-- ************************************
		Cachable Html Widget
		
		A Cachable Html Widget to render html items.  
		*************************************-->

	<class name="CachableHtmlWidget" extends="CachableComponent"
		comptype="${gCompTypes.WIDGET_HTML}" aaactive="true"
		aasilent="false">
		
		<attribute name="contentLoadedDel" value="$once{new lz.Delegate(this,'func2')}" />
		<attribute name="answered" type="boolean" value="false" />
		<attribute name="answer" />
		<attribute name="widget_id" />
		<attribute name="answerObjSet" value="$once{new Object()}"/>
		<attribute name="unlocked" type="boolean" value="false"/>
		<!--<attribute name="checkForTEItemsDel" value="$once{new lz.Delegate(this,'checkForTEItems')}"/>-->
		<attribute name="checkiframeStateDel" value="$once{new lz.Delegate(this,'checkiframeState')}" />
		<attribute name="setFrameDel" value="$once{new lz.Delegate(this,'setFrame')}" />
		<attribute name="filepath" type="string"/>
		<attribute name="srcUrl" />
		<method name="init">
			super.init();
		</method>

		<handler name="oninit">
		Debug.write("Cachaable html widget handlerinit");
		</handler>

		<handler name="ondata" args="data"><![CDATA[
		gController.setAttribute('srcUrlForTE',"");
		var srcUrl = data.getAttr('src');
		this.setAttribute('srcUrl', srcUrl);
		gController.setAttribute('srcUrlForTE',srcUrl);

		this.setAttribute('unlocked', false);
		this.setAttribute('answerObjSet', {});

		if (data.hasAttr("id")) {
	      	var id = data.getAttr('id');
	      	this.setAttribute('widget_id',id);
	        this.setAttribute('widget_id', data.getAttr("id"));
	        var answer = gController.getStateForInputWidgetId(this.widget_id);
			if(answer){
				this.setAttribute('answered',false); //We are setting answered as false so that we can setTheState properly. This has to be revisited 
				var selectedValuesArr = [];
				if(answer['checkedVals']){
					var selectedValues = answer['checkedVals'];
					for (var i in selectedValues){
						if(selectedValues.hasOwnProperty(i) && !isNaN(+i)) {
	      					  selectedValuesArr[+i] = selectedValues[i];
	   					}
						
					}
					answer['checkedVals'] = selectedValuesArr;
				}

				this.setAttribute('answerObjSet', answer);

			}
			gController.addHtmlField({"widget_id" : id, "answered" : this.answered, "answer" : this.answer, "ref" : this}); 

		}
		/*if (data.hasAttr("width") && data.getAttr("width")!="" && data.getAttr("width")!=null) {
			this.main.ht.setAttribute('width', data.getAttr("width"));
		}else{
			this.main.ht.setAttribute('width', 780);
		}
		if (data.hasAttr("height") && data.getAttr("height")!="" && data.getAttr("height")!=null) {
			this.main.ht.setAttribute('height', data.getAttr("height"));
		}else{
			this.main.ht.setAttribute('height', 450);
		}*/
		
		//to increase the panel height to avoid TE item getting cut at the bottom
		this.parent.wrapper.setAttribute('height',500);
		if (gController.hasFontAccommodation && gQuestion.doaccomlayout){
			this.parent.parent.wrapper.setAttribute('height',500);
		}
		
		gController.storedHtmlFields.push(this);
		gController.setState(gController.GET_TE_ITEMS_PATH_STATE);
		var s = "sendRequest('getTEItems','','ContentAction')";
      	lz.Browser.loadJS(s);
		
		]]>
		</handler>
		
		<method name="checkForTEItems"><![CDATA[
			if($dhtml){
				var filepath = gController.TEItemPath+"/"+gController.srcUrlForTE+"/previewer.html";
				this.setAttribute("filepath",filepath);
				
				setFrame();
			}
			else{			
				var srcUrl = "http:items/"+ gController.srcUrlForTE +"/previewer.html";
				this.main.ht.setAttribute('src', srcUrl);
				this.main.ht.setAttribute('visible',true);
			}

		]]>
		</method>

		<method name="setFrame">
			this.main.ht.setAttribute('src', this.filepath);
			TEItemLoaded();
		</method>

		<method name="TEItemLoaded"><![CDATA[
			this.main.ht.setAttribute('visible',true);
			if(gController.storedHtmlFields != null && gController.storedHtmlFields.length>0)
				gController.storedHtmlFields.pop();
			checkiframeState();
			func2();
			]]>
		</method>

				
		<method name="func1"><![CDATA[
			if(this.main.ht.ready){
            	var del = new LzDelegate(this, 'handleFunc1');
            	del = isAnswered();		
				handleFunc1(del);
            } 
		]]>
        </method>

        <method name="handleFunc1" args="retVal"><![CDATA[
            if(retVal != null && retVal != undefined){
				if( retVal == true || retVal ==  'true'){
					this.setAttribute('answered', true);
					gController.updateBlueBallForHtmlItem(retVal);
				}else{
					this.setAttribute('answered', false);
					gController.updateBlueBallForHtmlItem(retVal);
					}
			}
       ]]> </method>

		<method name="setAnswer" ><![CDATA[
		   var ansObj = gController.teItemState[this.srcUrl];
		   if(this.main.ht.ready && gController.htmlFields.length > 0){
		    if(!this.answered){
		     var htmlContent = this.answerObjSet.htmlContent;
		     var jsonContent = this.answerObjSet.jsonContent;
		     var checkedVals = []
		     if(this.answerObjSet.checkedVals){
		      checkedVals = this.answerObjSet.checkedVals;
		     }
		     		      
		     if(ansObj){
		   		htmlContent = ansObj.htmlContent;
		   		jsonContent = ansObj.jsonContent;
		   	}
			setState(htmlContent, jsonContent, checkedVals);
		    }
		   }
	   
	    ]]></method>

        
        <method name="func2">
					doneLoading();
        </method>
        
        <method name="handleFunc2" args="retVal1">
    	
            if(retVal1 == true || retVal1 == 'true'){
            	doneLoading();
            	lz.Timer.removeTimer(contentLoadedDel);
            }
        </method>
        
        <method name="getHtmlState">
           if(this.main.ht.ready){
            var getStateDel = new lz.Delegate(this, 'getStateHandler');
             getStateDel = getState();
             getStateHandler(getStateDel);
           } 
        
        </method>
        
	    <method name="getStateHandler" args="retVal">
				this.setAttribute('answer', retVal);
				gController.updateHtmlFields(retVal,this.answered);
	     </method>
        

       
		<method name="doneLoading"><![CDATA[	
            super.doneLoading();
        ]]></method>        
        
		<method name="hide">
			this.main.ht.setAttribute('visible',false);
		</method>
		
		<method name="show">
			this.main.ht.setAttribute('visible',true);
		</method>

		<method name="doReturnToCache"><![CDATA[
			if(!this.answered){
				var obj = gController.answerObj;
				gController.teItemState[this.srcUrl] = obj;			
			}else {
				if(gController.teItemState[this.srcUrl] !=null && typeof gController.teItemState[this.srcUrl] !='undefined')
					delete gController.teItemState[this.srcUrl];			
			}
			this.main.ht.setAttribute('visible',false);
			this.main.ht.setAttribute('src',"");
			//canvas.setAttribute('frameLoaded',false);
       ]]></method>
       
       <method name="checkiframeState">
       if (!gController.accomodationCheck){
				iframeState();
			 	lz.Timer.resetTimer(checkiframeStateDel, 1000);
			 }else{
			 	lz.Timer.removeTimer(checkiframeStateDel);
			 	gController.setAttribute("accomodationCheck",false);
			 }
		</method>
		<method name="resetCheckIframeStateTimer"><![CDATA[
				lz.Timer.removeTimer(checkiframeStateDel);
			
		]]></method>
		
       
       <view name="main" width="${parent.parent.width - 20}" height="${parent.parent.height - 10}">
 	       <html name="ht" id="htmlwiget" x="5" scrollbars="false" framename="htmlwigetframe" width="780" height="490">
		   </html>
       </view>

	</class>
</library>