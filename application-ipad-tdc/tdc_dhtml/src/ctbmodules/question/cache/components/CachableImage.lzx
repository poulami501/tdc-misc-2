<library>

	<include href="CachableComponent.lzx"/>

	<!-- ************************************
         CachableImage

         A cachable image.  Will set the resource of the view
         with information passed in

         *************************************-->

	<class name="CachableImage" extends="CachableComponent"
           comptype="$once{gCompTypes.WIDGET_IMAGE}" aaactive="true">

	   <attribute name="lzclass" type="string" value="lz.CachableImage" />

       <attribute name="hasAltText" value="false"/>
       <attribute name="altText" type="string" />
       <attribute name="readable"
                   value="${ gReadableText.isReadable &amp;&amp; hasAltText }"/>

       <attribute name="autoenlarge" value="" type="string" />
       <attribute name="retrycount" value="0"/>
       <attribute name="timeoutretrycount" value="0"/>
       <attribute name="servletBase" type="string" />
       <attribute name="verticalAlign" type="string"/>

		<attribute name="hasPlayed" type="boolean" value="false"/>
		<attribute name="widget_id"/>
		<attribute name="playorder"/>
		<attribute name="isaudio"/>
		<attribute name="disableAnswerArea" type="boolean" value="false"/>
		<attribute name="enableWhenAnswered" type="boolean" value="false"/>
		<attribute name="reqXml"/>
		<attribute name="inAnsChoice" type="boolean" value="false"/>
		<!--<attribute name="isLoadedDel"
			value="$once{new lz.Delegate(this,'isLoaded')}" />
		<attribute name="getImageResponseDel"
			value="$once{new lz.Delegate(this,'getImageResponse')}" />
		<attribute name="image_id" type="string"/>-->

        <!-- ================================
             method
             ================================= -->
        <method name="init">
        //Debug.write("cachable image init called...");
            super.init();
        </method>

		<handler name="oninit"><![CDATA[
			/*getImageResponse();
			lz.Timer.resetTimer(getImageResponseDel, 1000);*/

		]]></handler>

        <method name="read">
            if ( this['readable'] ) {
                gReadableText.read(altText,false,false);
            }
        </method>

		<!--
		override our super classes initComponent to also
		set the source of the view
		-->

		<method name="getImageUrl" args="fileName"><![CDATA[
			var trimmedFileName = trimFileName(fileName);
			var xml = gXmlHelper.getGetImageXml(fileName);
			this.setAttribute("reqXml",xml);
			//gController.setState(gController.GET_IMAGE_STATE);
			//sendRequest('getImage',xml,'ContentAction');
			getImage(xml);
		]]></method>

		<method name="trimFileName" args="fileName"><![CDATA[
			var result = fileName == null ? "" : fileName;
			if (fileName != null && fileName.indexOf('file:///') == 0) {
				result = fileName.substring(8, fileName.length);
			}
			if (result.indexOf('~STG~local') == 0) {
                var index = result.indexOf('/tmp');
                if (index > 0) {
                    result = result.substring(index, result.length);
                }
			}
			return result;
		]]></method>

		<handler name="ondata" args="data"><![CDATA[
			// When the XML attribute enlargeable is set to
            // "yes"		 : Display a zoom button for all users
            // "no"			 : Don't display a zoom button
            // "accommodated : Only display a zoom button for accommodated users
            //
            // This logic needs to be re-entrant, so it is tricky
			var enlargeAttr = data.getAttr("enlargeable");
			var isEnlargeable = false;
			var imageNumber;
   			if (enlargeAttr == "yes"){
   				isEnlargeable = true;
   			}
   			else if (enlargeAttr == "accommodated"){
   				isEnlargeable = gController.hasFontAccommodation;
   			}
            if (isEnlargeable) {
               this.enlarge.setAttribute("visible", true);
//               parent.wrapper.setAttribute("height", parent.wrapper.height + 35);
   			}
            else {
               this.enlarge.setAttribute("visible", false);
            }
            this.autoenlarge = data.getAttr("autoenlargeable");
			if(data.hasAttr('widget_id')){
					this.setAttribute('widget_id', data.getAttr('widget_id'));
			}else{
					this.setAttribute('widget_id', data.getAttr('src'));
			}

			this.imageview.setAttribute('height', Number(data.getAttr('height')));
			this.imageview.setAttribute('width', Number(data.getAttr('width')));
			
			if (data.hasAttr ('inAnsChoice')) {
				this.setAttribute ('inAnsChoice', data.getAttr ('inAnsChoice'));
			}
			if(this.inAnsChoice){
				if (data.hasAttr ('valign')) {
					this.setAttribute ('valign', data.getAttr ('valign'));
				}
				if (data.hasAttr ('halign')) {
					this.setAttribute ('align', data.getAttr ('halign'));
				}
			}

			if (data.hasAttr ('id')) {
				imageNumber = Math.floor(Math.random() * 1000000);
    			this.setAttribute ('image_id', data.getAttr ('id') + "_" + imageNumber);

			}else if(data.hasAttr('image_ref')) {
				imageNumber = Math.floor(Math.random() * 1000000);
				this.setAttribute ('image_id', data.getAttr('image_ref') + "_" + imageNumber);
			}

			if(data.hasAttr('src')) {
				var filename = data.getAttr('src');
				getImageUrl(this.image_id+"||"+filename);
			}
			else {
				if(data.hasAttr('image_ref')) {
					getImageUrl(this.image_id+"||"+data.getAttr('image_ref'));
				}
			}

			 if (data.hasAttr( 'alt_text' ) ) {
            	var dataAltText = data.getAttr( 'alt_text' );
                this.setAttribute( 'hasAltText', true );
                this.setAttribute('altText',  dataAltText );
                this.setAAText(dataAltText);
            } else {
                this.setAttribute( 'hasAltText', false );
            }

			getEnlargedImage();

			var elm = this.imageview.getDisplayObject();
			elm.setAttribute('id',this.image_id);
			//elm.setAttribute('id',this.image_id + "_" + imageNumber);

			//gController.imageFieldArr.push(this);
			gController.imageFieldArr[this.image_id]=this;
			
			//reset image x pos for caching
			//this.setAttribute("x",0);
			//this.getDisplayObject().style.marginLeft = 0;
			
			//getImageResponse();
		]]>
		</handler>

		<method name="getImageResponse"><![CDATA[
			if(gController.imageData != null){
				var imgData = gController.imageData[this.image_id];
				if(imgData != null && imgData != "undefined"){
					gController.setAttribute("currentImageId",this.image_id);
					//lz.Timer.removeTimer(getImageResponseDel);
					isLoaded(imgData);
					//lz.Timer.removeTimer(isLoadedDel);
	        		doneLoading();
				}/*else{
					lz.Timer.resetTimer(getImageResponseDel, 2000);
				}*/
			}
			]]>
		</method>

		<method name="isLoaded" args="imgData"><![CDATA[
			if (gController.currentImageId == this.image_id){;
				this.imageview.setAttribute('src', "data:image/png;base64,"+ imgData);
			}
		]]></method>

		<method name="getDefaultErrorMessage">
		 	var errorStr1 = "The Online Assessment software is unable to connect with the server.";
			var errorStr2 = "Ask the person in charge of this test to close this window. Log in again in three minutes, and you will return to your last saved answer.";
			var errorStr3 = "Error Code: TDC207";
			return errorStr1 + "^" + errorStr2+ "^" + errorStr3;
		</method>

		<method name="getEnlargedImage"><![CDATA[
				if (this['autoenlarge'] == "zoom") {
	                // This contains the updated height and width values
	                // from the newly created panel
	                var orig_height = data.getAttr("height");
	                var orig_width = data.getAttr("width");
// console.log("CachableImage#getEnlargedImage: orig_width=" + orig_width + ", orig_height=" + orig_height);

	                var offset = 40;
	//Debug.write("CachableImage updateImageLayout, w : " + orig_width + " h : "
	//                        + orig_height + " ratio : " + orig_width/orig_height);
	                var mult_factor  = (gEnlargePopup.width - offset)/orig_width;
	//Debug.write("mult_factor : " + mult_factor + " w : " + orig_width + " h : " + orig_height);
	                var width = gEnlargePopup.width - offset;
	                var height = Math.ceil(orig_height * mult_factor);
	//Debug.write("updated w : " + 700 + " h : " + height);

	                // Controls the size of the image
	                this.imageview.setAttribute("stretches", "both");
	                this.imageview.setAttribute("width", width);
	                this.imageview.setAttribute("height", height);

	                // Turn off the scrollbar when the image height is less
					// than the popup's height
	                if (height < gEnlargePopup.height) {
	                   gEnlargePopup.contents.scaler.scroller.setAttribute("visible", false);
	                }
	                else {
	                   gEnlargePopup.contents.scaler.scroller.setAttribute("visible", true);
	                }

	                // Controls the physical dimensions of the panel
	                parent.wrapper.setAttribute('height', height);
	               // gController.imageFieldArr.pop();
	                gController.panelArr.pop();
				}

			if (this['autoenlarge'] == "yes" && gController.hasFontAccommodation) {
			
                var offset = 0;
                if(!this.data.hasAttr("halign") ||
                  (this.data.getAttr("halign") != "center"))
                {
                    //use our own get relative to because ours is flaking out.  This will
                    //essentially give us the attribute relative to our parent
                    var offset = getAttrRelComp("x", this);
                }

                var fontmag = this.fontsize/canvas.basefontsize;
                var factor = Math.max((parent.width - offset - 1)/this.width, 1);

                //make sure we're not magnified beyond fontmag
                if (factor > fontmag) {
                    factor = fontmag;
                }
                var newh = factor * this.height;

                // make room for the scrollbar if necessary
                if (!this.panel.growtocontents
                    && parent.height + (newh-this.height) > this.panel.height
                    && factor != fontmag)
                {
                    factor = Math.max((parent.width - offset - 15)/this.width, 1);
                    newh = factor * this.height;
                }

				/** since, same class is used for inline images so,
				  * when used as inline image, the factor will
				  * always be related to fontsize and not to the
				  * position of the image */
				if((this.parent instanceof lz.CachableTextField) && this.parent['embedded_inline_image'] == true) {
					factor = fontmag;
                    newh = factor * this.height;
				}

                //set the size
                this.imageview.setAttribute("stretches", "both");
                this.imageview.setAttribute("width", this.width * factor);
                this.imageview.setAttribute("height", newh);
                // Allow this panel to grow to reflect font size
                this.setAttribute('width', null);
                this.setAttribute('height', null);

            }
		]]></method>

		<method name="showError">
			canvas.setAttribute("g_error", getDefaultErrorMessage());
		</method>

		<!-- Reset the CachableImage before returing the component to cache. -->
		<method name="reset">
			super.reset();
			this.imageview.resource = null;
		</method>

        <handler name="onload" reference="this.imageview">
        	updateImageLayout();
        </handler>

        <method name="getAttrRelComp" args="attr, from">
            var p = from.immediateparent;
            var toreturn = from[attr];

            while (!(p instanceof lz.CachableComponent)) {
                toreturn += getAttrRelComp(attr, p);
                p = p.immediateparent;
            }
            return toreturn;
        </method>

		<method name="updateImageLayout"><![CDATA[
		]]></method>


		<!-- <method name="hide">
            	this.setAttribute('opacity',0);
            	//Debug.write("hide...", this.isReadable);
            	// this.imageview.setAttribute('clickable',false);
		</method>
		<method name="show">
            	this.setAttribute('opacity',100);
            	if(this.readable){
            		//this.imageview.setAttribute('clickable',true);
				}
		</method> -->

		<method name="adjustSize" args="newWidth, newHeight">
			var imgElm = this.imageview.sprite.__LZimg;
			if(imgElm) {
				imgElm.setAttribute("width", newWidth);
				imgElm.setAttribute("height", newHeight);
			}
		</method>


        <image name="imageview" clickable="${classroot.readable}">
			 <handler name="oninit">
			   this.bringToFront();
            </handler>
            <handler name="onsrc" args="s">
            	classroot.adjustSize(this.width, this.height);
				//reset image x pos for caching
				if(!this.parent.inAnsChoice){
					if (this.parent.data.hasAttr ('valign')) {
						this.parent.setAttribute ('valign', this.parent.data.getAttr ('valign'));
					}
					if (this.parent.data.hasAttr ('halign')) {
						if(this.parent.data.getAttr ('halign') == 'center'){
							this.parent.setAttribute('x',(this.parent.parent.width-this.parent.width)/2);
						}else{
							this.parent.setAttribute('align', this.parent.data.getAttr ('halign'));//for halign ! = 'center'
						}
					}
				}
            </handler>
            <!--<handler name="ondata">
				this.getDisplayObject().style.marginLeft = 0;
            </handler>-->
            <handler name="onclick">
        		classroot.read();
        	</handler>
        	<method name="getLeftStyle">
        		return this.sprite.__LZdiv.parentNode.style.left;
        	</method>
        </image>
       <!--  <view name="imageview" bgcolor="green" height="39" width="28" />-->
		<EnlargeButton name="enlarge"
                    x="${classroot.imageview.width-this.width}">
			<handler name="oninit">
				var elm = this.getDisplayObject();
				elm.setAttribute("id","imageButton");
				this.bringToFront();
			</handler>
		</EnlargeButton>



	</class>

</library>
