<library>

    <class name="ManipulativeButton">
        <datapath/>

        <attribute name="toolid" type="string"/>
        <attribute name="isenabled" value="false"/>
        <attribute name="isselected" value="false"/>
		<attribute name="btnResource" type="string"/>


        <handler name="oninit">
            this.datapath.setXPath ('@' + this.toolid);
        </handler>

        <handler name="ondata" args="data"><![CDATA[
/* prevent opening of another TI calculator when one is already open start */

			var currState = data;

			if(this.toolid == "ti_scientific_calculator" && currState!='disable'){
				if(gManipulatives.tiCalculatorDetails.TI84 == "sel"){
					currState = "up";
				}
			}else if(this.toolid == "ti_scientific_graphic_calculator" && currState!='disable'){
				if(gManipulatives.tiCalculatorDetails.TI30 == "sel"){
					currState = "up";
				}
			}
			
			/* prevent opening of another TI calculator when one is already open end */
			
            this.setAttribute ('isselected', currState == 'sel');
			
            if(currState == null || currState == 'disable'){

	            this.setAttribute ('isenabled', false);
	            this.manipBtn.setAttribute ('visible', false);
				this.btn_shadow.setAttribute ('visible', false);
				this.gap.setAttribute ('visible', false);
            }
            else{
	            this.setAttribute ('isenabled', true);
	            this.manipBtn.setAttribute ('visible', true);
				this.btn_shadow.setAttribute ('visible', true);
				this.btn_shadow.sendToBack();
				this.gap.setAttribute ('visible', true);
            }

            this.manipBtn.setAttribute('frame', this.isselected ? 2 : 1);

            if (!this.isselected) {
                this.manipBtn.setAttribute('frame', this.isenabled  ? 1 : 3);
            }
            
            if(gController.htmlFields.length > 0){
            	if(this.toolid == 'highlighter' && this.isselected){
            		enableHighlighter(true);
            	}else if(this.toolid == 'highlighter' && !this.isselected){
            		enableHighlighter(false);
            	}
            	
            	if(this.toolid == 'eraser' && this.isselected){
            		enableEraser(true);
            	}else if(this.toolid == 'eraser' && !this.isselected){
            		enableEraser(false);
            	}
        	}
            
        ]]></handler>
        
        <view name="manipBtn" width="37" height="40" stretches="both" resource="${classroot.btnResource}">
	        <handler name="onmouseover"><![CDATA[
	            if (!classroot.isselected && classroot.isenabled) this.setAttribute('frame', 2); 
	        ]]></handler>
	
	        <handler name="onmouseout"><![CDATA[
	            if (!classroot.isselected && classroot.isenabled) this.setAttribute('frame', 1); 
	        ]]></handler>
	
	        <handler name="onclick"><![CDATA[
	            if (classroot.isenabled) {
	                gController.setManipulativeSelState (classroot.toolid, 
	                                                         classroot.isselected ? 'up' : 'sel');
					var manipData = gController.dpstudentdata.xpathQuery('current_item/item_model/manipulatives/global');
					var highlighterData = gController.dpstudentdata.xpathQuery('current_item/item_model/manipulatives/global/@highlighter');
			
					var dnGlobal = gController.dpstudentdata.xpathQuery ('current_item/item_model/manipulatives/global');    
	                if(classroot.isselected){
	                  if(highlighterData == 'sel'){
	                	if(gController.panelArr.length > 0){
		            		for(var i=0;i<gController.panelArr.length;i++){
								if(gController.panelArr[i] instanceof lz.CachableScrollingTextPanel){
									gController.panelArr[i].scrolltext.contents.textarea.scrollarea.setAttribute('clickable',false);
								}else{
									if(gController.panelArr[i].wrapper.scrollcontainer){
										gController.panelArr[i].wrapper.scrollcontainer.setAttribute('clickable',false);
									}
								}
							}
		            	}
		             }
					}else {
					  if(highlighterData == 'sel'){
	                	if(gController.panelArr.length > 0){
		            		for(var i=0;i<gController.panelArr.length;i++){
								if(gController.panelArr[i] instanceof lz.CachableScrollingTextPanel){
									gController.panelArr[i].scrolltext.contents.textarea.scrollarea.setAttribute('clickable',false);
								}else{
									if(gController.panelArr[i].wrapper.scrollcontainer){
										gController.panelArr[i].wrapper.scrollcontainer.setAttribute('clickable',false);
									}
								}
							}
		            	}
		              }else{
						if(gController.panelArr.length > 0){
		            		for(var i=0;i<gController.panelArr.length;i++){
								if(gController.panelArr[i] instanceof lz.CachableScrollingTextPanel){
									gController.panelArr[i].scrolltext.contents.textarea.scrollarea.setAttribute('clickable',true);
								}else{
									if(gController.panelArr[i].wrapper.scrollcontainer){
										gController.panelArr[i].wrapper.scrollcontainer.setAttribute('clickable',true);
									}
								}
							}
						}
		            }                                   
	            }
				}
	            ]]>
	        </handler>
        </view>
        
        <view name="btn_shadow" tintcolor="0x000000" resource="qButtonShadow" x="6"
        	  opacity="0.5"
        	  width="37" height="43" stretches="both"/>

		<view name="gap" width="16" x="${parent.manipBtn.x+parent.manipBtn.width}" y="${parent.manipBtn.y}"/>
    </class>
</library>
