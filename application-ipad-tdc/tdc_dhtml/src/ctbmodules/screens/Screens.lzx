<library>

    <include href="LoginScreen.lzx"/>

    <include href="LoginErrorScreen.lzx"/>

    <include href="DownloadScreen.lzx"/>

    <include href="WelcomeScreen.lzx"/>
    <include href="PauseScreen.lzx"/>
    <include href="FinishScreen.lzx"/>
    <include href="FeedbackScreen.lzx"/>

    <include href="ErrorScreen.lzx"/>
    <include href="OutOfTimeScreen.lzx"/>
    <include href="GoodbyeScreen.lzx"/>
    <include href="TimeOutScreen.lzx"/>

   <include href="OptOutScreen.lzx"/>
   <include href="EnableGuidedAccessScreen.lzx"/>
   <include href="AppUpgradeScreen.lzx"/>
   <include href="ScreenshotWarningScreen.lzx"/>
   <include href="SavingResponseScreen.lzx"/>
 
    <include href="Frame.lzx"/>

    <class name="Screens" extends="Frame">

       <attribute name="onFeedbackScreen" value="false"/>
		
        <attribute name="allowclick" value="false"/>


        <method name="isOnFeedbackScreen">
            return onFeedbackScreen;
        </method>
        
        <method name="isOnPauseScreen"><![CDATA[
        	return (contents.ps.isinited && contents.ps.visible);
        ]]></method>
        
        <method name="clicked">
            setAttribute( 'allowclick', false );
        </method>

        <method name="resetClicked">
            setAttribute( 'allowclick', true );
        </method>


		<method name="isOnFinishScreen"><![CDATA[
			return (contents.fs.isinited && contents.fs.visible);
		]]></method>
		
			<method name="removeFinishState"><![CDATA[
			 contents.fs.setAttribute('visible', false);
		]]></method>

		<method name="isOnTimeOutScreen"><![CDATA[
			return (contents.os.isinited && contents.os.visible);
		]]></method>
		
        <method name="removeAllStates">
            setAttribute( 'allowclick', true );

            if ( contents.ls.isinited ) contents.ls.setAttribute('visible', false );

            if ( contents.les.isinited ) contents.les.setAttribute('visible', false );

            if ( contents.ds.isinited ) contents.ds.setAttribute('visible', false );

            if ( contents.es.isinited ) contents.es.setAttribute('visible', false );
            if ( contents.fs.isinited ) contents.fs.setAttribute('visible', false );
            if ( contents.fbs.isinited ) contents.fbs.setAttribute('visible', false );

            if ( contents.ps.isinited ) contents.ps.setAttribute('visible', false );
            if ( contents.os.isinited ) contents.os.setAttribute('visible', false );
            if ( contents.ws.isinited ) contents.ws.setAttribute('visible', false );
            if ( contents.gs.isinited ) contents.gs.setAttribute('visible', false );
            if ( contents.oos.isinited ) contents.oos.setAttribute('visible', false );
			if ( contents.egas.isinited ) contents.egas.setAttribute('visible', false );
            if ( gSecurityScreen.secContents.iss.isinited ) gSecurityScreen.secContents.iss.setAttribute('visible', false );
 			if ( contents.sws.isinited ) contents.sws.setAttribute('visible', false );
 			if ( contents.ssr.isinited ) contents.ssr.setAttribute('visible', false );
			if ( contents.ts.isinited ) contents.ts.setAttribute('visible', false );
            //prancingMan.remove();
            //standingMan.remove();
        </method>

        <method name="showDownload" args="totalSubtests">

            removeAllStates();

            if ( !contents.ds.isinited ) contents.ds.completeInstantiation();

            contents.ds.setTotalSubtests(totalSubtests);
            contents.ds.setAttribute('visible', true );

            show();

        </method>

        

        <method name="incrementSubtestDownload" args="totalItems,totalFileParts">

        	contents.ds.incrementSubtest(totalItems, totalFileParts);

        </method>

        <method name="incrementFilePartDownload">
        	contents.ds.incrementFilePart();
        </method>

        <method name="incrementItemDownload">

        	contents.ds.incrementItem();

        </method>

        

         <method name="showError" args="xml">

         Debug.write("gScreens.showError");
			//gMusicPlayer.stop();
         printBigString(xml);

            removeAllStates();

            if ( !contents.es.isinited ) contents.es.completeInstantiation();

            contents.es.showError(xml);
			
			/*close TI calculators when in error screen*/
			if(jQuery('#calculatorDiv').is(":visible")){	
				closeTI30Calc();
			}	
			if(jQuery('#calculatorTI84Div').is(":visible")){	
				closeTI84Calc();
			}	
			
            contents.es.setAttribute('visible', true );

            show();

        </method>

        <method name="showRestart" args="m,q,u, sn">
            removeAllStates();
            if ( !contents.ws.isinited ) contents.ws.completeInstantiation();
            //prancingMan.apply();
            contents.ws.setupRestart( m, q, u, sn );
            contents.ws.setAttribute('visible', true );
            show();
        </method>
        <method name="showFinish" args="a, m">
            removeAllStates();
            if ( !contents.fs.isinited ) contents.fs.completeInstantiation();
            //standingMan.apply();
            contents.fs.setStats( a, m );
            contents.fs.setAttribute('visible', true );
            show();
        </method>
        <method name="showOutOfTime" args="a, m">
            removeAllStates();
            if ( !contents.os.isinited ) contents.os.completeInstantiation();
            //standingMan.apply();
            contents.os.setStats( a, m );
            contents.os.setAttribute('visible', true );
            show();
        </method>
        
        <method name="resetTextFieldColor">
             if(gController.displayText == true || gController.displayText == 'true') {
				contents.ps.pw.istepPasswordField.style.setAttribute('textfieldcolor', gController.answerBgColor);
			} else {
            	contents.ps.pw.otherPasswordField.style.setAttribute('textfieldcolor', gController.answerBgColor);
			}
        </method>
        
        <method name="showPause" args="sn">
            removeAllStates();
            if ( !contents.ps.isinited ) contents.ps.completeInstantiation();
            //standingMan.apply();
            if(gController.displayText == true || gController.displayText == 'true') {
                if(gController.isWV == true || gController.isWV == 'true') {
					contents.ps.pw.wvPasswordField.setAttribute('visible', true );
                    contents.ps.pw.wvPasswordField.setAttribute('text', '');
					contents.ps.pw.wvPasswordField.style.setAttribute('textfieldcolor', 0xFFFFFF);

				    contents.ps.pw.otherPasswordField.setAttribute('visible', false );
					contents.ps.pw.istepPasswordField.setAttribute('visible', false );
                    
					contents.ps.ac.pac.accesscodeField.setAttribute('visible', false);

					contents.ps.ac.pac.wvAccesscodeField.setAttribute('visible', true );
					contents.ps.ac.pac.wvAccesscodeField.setAttribute('enabled', false );
					
                }
                else{
                    contents.ps.pw.wvPasswordField.setAttribute('visible', false );
					contents.ps.pw.otherPasswordField.setAttribute('visible', false );
					contents.ps.pw.istepPasswordField.setAttribute('visible', true );
					contents.ps.pw.istepPasswordField.setAttribute('text', '');
					contents.ps.pw.istepPasswordField.style.setAttribute('textfieldcolor', 0xFFFFFF);
					contents.ps.ac.pac.accesscodeField.setAttribute('visible', true);

					contents.ps.ac.pac.wvAccesscodeField.setAttribute('visible', false );
				}
			} else {
                contents.ps.pw.wvPasswordField.setAttribute('visible', false );
				contents.ps.pw.otherPasswordField.setAttribute('visible', true );
				contents.ps.pw.istepPasswordField.setAttribute('visible', false );
            	contents.ps.pw.otherPasswordField.setAttribute('text', '');
				contents.ps.pw.otherPasswordField.style.setAttribute('textfieldcolor', 0xFFFFFF);
                contents.ps.ac.pac.accesscodeField.setAttribute('visible', true);

				contents.ps.ac.pac.wvAccesscodeField.setAttribute('visible', false );
			}
            contents.ps.prompt.setAttribute('text', 'Log in to resume your paused test.' );
            contents.ps.studentName.setAttribute('text', 'Hello ' + sn);

            contents.ps.setAttribute('visible', true );
            show();
        	if(gController.displayText == true || gController.displayText == 'true') {
              if(gController.isWV == true || gController.isWV == 'true') {
                 	lz.Focus.setFocus(contents.ps.pw.wvPasswordField);
               }else{
					lz.Focus.setFocus(contents.ps.pw.istepPasswordField);
 			   }
			} else {
        		lz.Focus.setFocus(contents.ps.pw.otherPasswordField);
			}
        </method>
        <method name="showLogin">

            removeAllStates();

//            if ( !contents.ls.isinited ) contents.ls.completeInstantiation();

			contents.ls.li.loginIdField.setAttribute('text', "");
			if(gController.displayText == true || gController.displayText == 'true') {
				if(gController.isWV == true || gController.isWV == 'true') {
					//console.log("ISWV IS");
		            contents.ls.pw.wvPasswordField.setAttribute('visible', true );

				    contents.ls.pw.otherPasswordField.setAttribute('visible', false );
					contents.ls.pw.istepPasswordField.setAttribute('visible', false );
					contents.ls.pw.wvPasswordField.setAttribute('text', "");
					contents.ls.ac.accesscodeField.setAttribute('visible', false);

					contents.ls.ac.wvAccesscodeField.setAttribute('visible', true );
					contents.ls.ac.wvAccesscodeField.setAttribute('text', "");
				}else{
                    //console.log("ISTEP IS");
                    contents.ls.pw.wvPasswordField.setAttribute('visible', false );
					contents.ls.pw.otherPasswordField.setAttribute('visible', false );
					contents.ls.pw.istepPasswordField.setAttribute('visible', true );
					contents.ls.pw.istepPasswordField.setAttribute('text', "");

					contents.ls.ac.wvAccesscodeField.setAttribute('visible', false );
					
					contents.ls.ac.accesscodeField.setAttribute('visible', true);
					contents.ls.ac.accesscodeField.setAttribute('text', "");
				}
			}
			else {
                //console.log("OTHERS IS");
				contents.ls.pw.otherPasswordField.setAttribute('visible', true );
				contents.ls.pw.istepPasswordField.setAttribute('visible', false );
				contents.ls.pw.otherPasswordField.setAttribute('text', "");
				contents.ls.pw.wvPasswordField.setAttribute('visible', false );
				
                contents.ls.ac.accesscodeField.setAttribute('visible', true);
                contents.ls.ac.accesscodeField.setAttribute('text', "");
                contents.ls.ac.wvAccesscodeField.setAttribute('visible',false );
				
			}



			//contents.ls.ac.accesscodeField.setAttribute('text', "");

            //standingMan.apply();

            contents.ls.setAttribute('visible', true );

            show();

        </method>
        <method name="showLoginError" args="e">

            removeAllStates();

            if ( !contents.les.isinited ) contents.les.completeInstantiation();

            //standingMan.apply();

            contents.les.setupError(e);

            contents.les.setAttribute('visible', true );

            show();

        </method>

        <method name="showWelcome" args="m,q,u, sn">
            removeAllStates();
            if ( !contents.ws.isinited ) contents.ws.completeInstantiation();
			//standingMan.remove();
            //prancingMan.apply();
            contents.ws.setupNewSubtest( m, q, u, sn );
            contents.ws.setAttribute('visible', true );
            show();
        </method>
        <method name="showContinue" args="m,q,u, sn">
            removeAllStates();
            if ( !contents.ws.isinited ) contents.ws.completeInstantiation();
           // prancingMan.apply();
            contents.ws.setupContinue( m, q, u , sn);
            contents.ws.setAttribute('visible', true );
            show();
        </method>

        <method name="showFeedback" args="feedback">

            removeAllStates();

            if ( !contents.fbs.isinited ) contents.fbs.completeInstantiation();

            contents.fbs.showFeedback( feedback );

            contents.fbs.setAttribute('visible', true );
			setAttribute("onFeedbackScreen", true);
            show();

        </method>


        <method name="nextFeedback">

        	contents.fbs.next();

        </method>



		<method name="previousFeedback">

			contents.fbs.previous();

		</method>

		

        <method name="showFeedback1" args="scoName, raw, max, unscored, index">

            removeAllStates();

			setAttribute("onFeedbackScreen", true);
            if ( !contents.fbs.isinited ) contents.fbs.completeInstantiation();

            contents.fbs.showFeedback( scoName, raw, max, unscored, index );

            contents.fbs.setAttribute('visible', true );

            show();

        </method>



        <method name="showGoodbye">

            removeAllStates();

            if ( !contents.gs.isinited ) contents.gs.completeInstantiation();
			contents.gs.isTimeout();
            contents.gs.setAttribute('visible', true );

            show();
						
			setTimeout(function (){
			sendRequest('exit','exit','UtilityAction')}, 1000);

        </method>
        
        <method name="showGuidedAccess">
            removeAllStates();

            if ( !contents.egas.isinited ) contents.egas.completeInstantiation();

            contents.egas.setAttribute('visible', true );

            show();
	
        </method>
        
        <method name="appUpgradeRequired">
            removeAllStates();

            if ( !contents.aus.isinited ) contents.aus.completeInstantiation();

            contents.aus.setAttribute('visible', true );

            show();
	
        </method>

		<method name="showScreenshotWarning">
            removeAllStates();

            if ( !contents.sws.isinited ) contents.sws.completeInstantiation();

            contents.sws.setAttribute('visible', true );

            show();
	
        </method>
        
       <method name="showOptOut" args="sn">

            removeAllStates();

            if ( !contents.oos.isinited ) contents.oos.completeInstantiation();
			contents.oos.setStudentName(sn);
            contents.oos.setAttribute('visible', true );

            show();

        </method>
        
        <method name="showTimeoutForInactivity">
        	removeAllStates();
          
            if ( !contents.ts.isinited ) contents.ts.completeInstantiation();
            contents.ts.setAttribute('visible', true );

            show();
			
            //gManipulatives.setAttribute('visible',false);
            //gScratchpad.setAttribute('visible',false);
            //hideMagnify();
			//gController.checkHideMaskingChoiceDD();
			 
        </method>

         <method name="show">
         	gItemInterface.setAttribute('visible', false);
         	gTutorial.setAttribute('visible', false);
         	gSecurityScreen.setAttribute('visible', false);
            this.setAttribute('visible',true );			
			lz.ModeManager.release( gSecurityScreen );
            gScreens.bringToFront();
            var hasmode = lz.ModeManager.hasMode( this );
            Debug.write( 'show ', hasmode );
            if ( !hasmode ) {
                lz.ModeManager.makeModal( this );
            }
        </method>

        <method name="hide">
            this.setAttribute('visible',false );
            lz.ModeManager.release( this );
        </method>
        
        <method name="showSavingResponseScreen">
        	removeAllStates();

            if ( !contents.ssr.isinited ) contents.ssr.completeInstantiation();

            contents.ssr.setAttribute('visible', true );

            show();
        </method>

       	  <view name="contents" options="ignorelayout"
              x="${ classroot.middle.x+15 }"
              y="${ classroot.middle.y+15}"
              width="${ classroot.middle.width -20}"
              height="${ classroot.middle.height }">

            <LoginScreen   name="ls" width="100%" height="100%"
                           initstage="immediate"/>

            <LoginErrorScreen   name="les" width="100%" height="100%"
                                initstage="defer"/>

            <DownloadScreen   name="ds" width="100%" height="100%"
                              initstage="defer"/>

            <WelcomeScreen name="ws" width="100%" height="100%"
                           initstage="defer"/>
            <PauseScreen   name="ps" width="100%" height="100%"
                           initstage="defer"/>
            <FeedbackScreen  name="fbs" width="100%" height="100%"
                          initstage="defer"/>

            <FinishScreen  name="fs" width="100%" height="100%"
                           initstage="defer"/>
            <ErrorScreen   name="es" width="100%" height="100%"
                           initstage="defer"/>
            <OutOfTimeScreen name="os" width="100%" height="100%"
                             initstage="defer"/>
            <GoodbyeScreen name="gs" width="100%" height="100%"
                             initstage="defer"/>
            <OptOutScreen name="oos" width="100%" height="100%"
                             initstage="defer"/>
            <EnableGuidedAccessScreen name="egas" width="100%" height="100%"
                             initstage="defer"/>
            <AppUpgradeScreen name="aus" width="100%" height="100%"
                             initstage="defer"/>
             <ScreenshotWarningScreen name="sws" width="100%" height="100%"
                             initstage="defer"/>
             <SavingResponseScreen name="ssr" width="100%" height="100%"
                             initstage="defer"/>
             <TimeOutScreen name="ts" width="100%" height="100%"
                             initstage="defer"/>
        </view>
	
        <!-- <state name="prancingMan" apply="false">
            <view resource="animations/prancingMan.swf"
                  x="-120" y="${ parent.contents.height }"/>
        </state>

        <state name="standingMan" apply="false">
            <view resource="animations/standingMan.swf"
                  x="500" y="${ parent.contents.height +50 }"/>
        </state>-->

    </class>

</library>
